<div class="container">
    <div class="row">
      <!-- Timer and Info Header -->
      <div class="col-12 mb-4">
        <div class="card">
          <div class="card-body">
            <div class="d-flex justify-content-between align-items-center">
              <h3 class="mb-0"><%= attempt.exam.title %></h3>
              <div class="d-flex align-items-center">
                <div class="me-4">
                  <strong>Time Remaining:</strong>
                  <span id="timer" data-end-time="<%= attempt.endTime %>"></span>
                </div>
                <!-- Removed extra header submit form -->
              </div>
            </div>
          </div>
        </div>
      </div>
  
      <!-- Questions & Submission Form (single form) -->
      <div class="col-12">
        <form id="examForm" method="POST" action="/exams/<%= attempt.exam._id %>/attempt/<%= attempt._id %>/submit">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">
          
          <% attempt.questions.forEach((questionAttempt, index) => { %>
            <div class="card mb-4">
              <div class="card-header">
                <h5 class="mb-0">Question <%= index + 1 %></h5>
              </div>
              <div class="card-body">
                <p class="mb-3"><%= questionAttempt.question.text %></p>
                
                <% if (questionAttempt.question.type === 'MCQ') { %>
                  <div class="list-group">
                    <% questionAttempt.question.options.forEach(option => { %>
                      <label class="list-group-item">
                        <input type="radio" 
                               name="answer_<%= questionAttempt.question._id %>" 
                               value="<%= option._id %>"
                               class="me-2 question-input"
                               data-question-index="<%= index %>"
                               <%= questionAttempt.answer === option._id.toString() ? 'checked' : '' %>>
                        <%= option.text %>
                      </label>
                    <% }); %>
                  </div>
                
                <% } else if (questionAttempt.question.type === 'TrueFalse') { %>
                  <div class="list-group">
                    <label class="list-group-item">
                      <input type="radio" 
                             name="answer_<%= questionAttempt.question._id %>" 
                             value="true"
                             class="me-2 question-input"
                             data-question-index="<%= index %>"
                             <%= questionAttempt.answer === 'true' ? 'checked' : '' %>>
                      True
                    </label>
                    <label class="list-group-item">
                      <input type="radio" 
                             name="answer_<%= questionAttempt.question._id %>" 
                             value="false"
                             class="me-2 question-input"
                             data-question-index="<%= index %>"
                             <%= questionAttempt.answer === 'false' ? 'checked' : '' %>>
                      False
                    </label>
                  </div>
                
                <% } else { %>
                  <textarea class="form-control question-input" 
                            name="answer_<%= questionAttempt.question._id %>" 
                            rows="4"
                            data-question-index="<%= index %>"
                            placeholder="Enter your answer here"><%= questionAttempt.answer %></textarea>
                <% } %>
  
                <div class="mt-2 text-muted">
                  <small>
                    <i class="fas fa-star"></i> Marks: <%= questionAttempt.question.marks %>
                    | <i class="fas fa-info-circle"></i> Type: <%= questionAttempt.question.type %>
                  </small>
                </div>
                <!-- Warning message for unanswered question -->
                <div class="unanswered-warning mt-2 alert alert-warning d-none">
                  <i class="fas fa-exclamation-triangle"></i> This question has not been answered yet!
                </div>
              </div>
            </div>
          <% }); %>
  
          <!-- Global warning for unanswered questions -->
          <div id="globalWarning" class="alert alert-warning mb-3 d-none">
            <i class="fas fa-exclamation-triangle"></i> Please answer all questions before submitting the exam!
          </div>
  
          <div class="d-grid gap-2 mb-4">
            <button type="submit" class="btn btn-primary btn-lg"
                    id="submitButton"
                    <%= attempt.status === 'SUBMITTED' ? 'disabled' : '' %>
                    style="<%= attempt.status === 'SUBMITTED' ? 'background-color: #6c757d; border-color: #6c757d;' : '' %>">
              <i class="fas fa-paper-plane"></i> Submit Exam
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  
  <script>
  // Make the server-side attempt object available on the client
  const attempt = JSON.parse('<%- JSON.stringify(attempt) %>');
  
  
  document.addEventListener('DOMContentLoaded', function() {
    // Timer functionality
    const timerElement = document.getElementById('timer');
    const endTime = new Date(timerElement.dataset.endTime).getTime();
    const examForm = document.getElementById('examForm');
    const submitButton = document.getElementById('submitButton');
    const globalWarning = document.getElementById('globalWarning');
    const questionInputs = document.querySelectorAll('.question-input');
    const warningMessages = document.querySelectorAll('.unanswered-warning');
  
    function updateTimer() {
      const now = new Date().getTime();
      const timeLeft = endTime - now;
      
      if (timeLeft <= 0) {
        // If time is up, check if all questions are answered.
        if (checkAllQuestionsAnswered()) {
          examForm.submit();
        } else {
          alert('Time is up, but you have unanswered questions! Please answer all questions before submitting.');
        }
        return;
      }
      
      const hours = Math.floor(timeLeft / (1000 * 60 * 60));
      const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
      
      timerElement.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    
    // Update timer every second
    updateTimer();
    setInterval(updateTimer, 1000);
  
    // Function to check if all questions have been answered
    function checkAllQuestionsAnswered() {
      let allAnswered = true;
      const processedQuestions = {};
  
      questionInputs.forEach(input => {
        const name = input.name;
        const questionIndex = input.dataset.questionIndex;
  
        // Process each question only once
        if (processedQuestions[name] === undefined) {
          let answered = false;
          if (input.type === 'radio') {
            // For radio buttons, check if any in the group is checked
            const radios = document.querySelectorAll(`input[name="${name}"]`);
            answered = Array.from(radios).some(radio => radio.checked);
          } else {
            answered = input.value.trim() !== '';
          }
          processedQuestions[name] = answered;
  
          // Show or hide individual warning for this question
          const warningElement = warningMessages[questionIndex];
          if (warningElement) {
            if (answered) {
              warningElement.classList.add('d-none');
            } else {
              warningElement.classList.remove('d-none');
            }
          }
          if (!answered) {
            allAnswered = false;
          }
        }
      });
  
      // Toggle global warning and disable/enable the submit button
      if (!allAnswered) {
        globalWarning.classList.remove('d-none');
        submitButton.disabled = true;
      } else {
        globalWarning.classList.add('d-none');
        submitButton.disabled = false;
      }
      return allAnswered;
    }
  
    // Attach event listeners to each input
    questionInputs.forEach(input => {
      input.addEventListener('change', checkAllQuestionsAnswered);
      // For textareas, use tagName instead of type
      if (input.tagName.toLowerCase() === 'textarea') {
        input.addEventListener('input', checkAllQuestionsAnswered);
      }
      
      // Auto-save functionality (optional)
      input.addEventListener('change', function() {
        localStorage.setItem(`exam_${attempt._id}_${input.name}`, input.value);
      });
      
      // Load saved answers (if any)
      const savedValue = localStorage.getItem(`exam_${attempt._id}_${input.name}`);
      if (savedValue) {
        if (input.type === 'radio') {
          if (input.value === savedValue) {
            input.checked = true;
          }
        } else {
          input.value = savedValue;
        }
      }
    });
    
    // Intercept form submission to ensure all questions are answered
    examForm.addEventListener('submit', function(e) {
      if (!checkAllQuestionsAnswered()) {
        e.preventDefault();
        alert("Please answer all questions before submitting the exam!");
        window.scrollTo({ top: 0, behavior: 'smooth' });
      } else {
        // Optionally, clear saved answers if submission goes through
        questionInputs.forEach(input => {
          localStorage.removeItem(`exam_${attempt._id}_${input.name}`);
        });
      }
    });
  });
  </script>