<div class="container">
    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h3 class="mb-0">Create New Question</h3>
                <a href="/exams/<%= exam._id %>/questions" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Questions
                </a>
            </div>
        </div>
        <div class="card-body">
            <form action="/exams/<%= exam._id %>/questions/create" method="POST" class="needs-validation" novalidate>
                <input type="hidden" name="_csrf" value="<%= csrfToken %>">

                <!-- Question Type -->
                <div class="mb-4">
                    <label for="type" class="form-label">Question Type</label>
                    <select name="type" id="type" class="form-select" required>
                        <option value="">Select Type</option>
                        <option value="MCQ">Multiple Choice</option>
                        <option value="TrueFalse">True/False</option>
                        <option value="ShortAnswer">Short Answer</option>
                        <option value="Essay">Essay</option>
                    </select>
                    <div class="invalid-feedback">
                        Please select a question type.
                    </div>
                </div>

                <!-- Question Text -->
                <div class="mb-4">
                    <label for="text" class="form-label">Question Text</label>
                    <textarea name="text" 
                             id="text" 
                             class="form-control" 
                             rows="3" 
                             required
                             minlength="10"></textarea>
                    <div class="invalid-feedback">
                        Question text must be at least 10 characters long.
                    </div>
                </div>

                <!-- Marks -->
                <div class="mb-4">
                    <label for="marks" class="form-label">Marks</label>
                    <input type="number" 
                           name="marks" 
                           id="marks" 
                           class="form-control" 
                           required
                           min="0"
                           max="100">
                    <div class="invalid-feedback">
                        Marks must be between 0 and 100.
                    </div>
                </div>

                <!-- Dynamic Options Section -->
                <div id="optionsSection"></div>

                <!-- Explanation -->
                <div class="mb-4">
                    <label for="explanation" class="form-label">Explanation</label>
                    <textarea name="explanation" 
                             id="explanation" 
                             class="form-control" 
                             rows="3"></textarea>
                    <div class="form-text">
                        Provide an explanation for the correct answer (optional).
                    </div>
                </div>

                <!-- Difficulty -->
                <div class="mb-4">
                    <label for="difficulty" class="form-label">Difficulty Level</label>
                    <select name="difficulty" id="difficulty" class="form-select" required>
                        <option value="Easy">Easy</option>
                        <option value="Medium" selected>Medium</option>
                        <option value="Hard">Hard</option>
                    </select>
                </div>

                <!-- Tags -->
                <div class="mb-4">
                    <label for="tags" class="form-label">Tags</label>
                    <input type="text" 
                           name="tags" 
                           id="tags" 
                           class="form-control"
                           placeholder="Enter tags separated by commas">
                    <div class="form-text">
                        Add tags to help organize questions (optional).
                    </div>
                </div>

                <!-- Images -->
                <div class="mb-4">
                    <label class="form-label">Images</label>
                    <div id="imageContainer">
                        <div class="image-row mb-2">
                            <div class="input-group">
                                <input type="file" 
                                       name="images[]" 
                                       class="form-control"
                                       accept="image/*">
                                <input type="text" 
                                       name="captions[]" 
                                       class="form-control"
                                       placeholder="Image caption (optional)">
                                <button type="button" 
                                        class="btn btn-danger remove-image"
                                        disabled>
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <button type="button" 
                            class="btn btn-secondary mt-2" 
                            id="addImage">
                        <i class="fas fa-plus"></i> Add Image
                    </button>
                </div>

                <!-- Submit Button -->
                <div class="d-grid">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Create Question
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Form Validation Script -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form');
    const typeSelect = document.getElementById('type');
    const optionsSection = document.getElementById('optionsSection');
    const imageContainer = document.getElementById('imageContainer');
    const addImageBtn = document.getElementById('addImage');

    // Handle question type change
    function handleQuestionTypeChange() {
        optionsSection.innerHTML = '';
        
        switch(typeSelect.value) {
            case 'MCQ':
                optionsSection.innerHTML = `
                    <div class="mb-4">
                        <label class="form-label">Options</label>
                        <div id="mcqOptions">
                            <div class="option-row mb-2">
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <input type="radio" name="correctOption" value="0" required>
                                    </div>
                                    <input type="text" name="options[0][text]" class="form-control" required placeholder="Option 1">
                                    <button type="button" class="btn btn-danger remove-option" disabled>
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="option-row mb-2">
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <input type="radio" name="correctOption" value="1" required>
                                    </div>
                                    <input type="text" name="options[1][text]" class="form-control" required placeholder="Option 2">
                                    <button type="button" class="btn btn-danger remove-option" disabled>
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-secondary mt-2" id="addOption">
                            <i class="fas fa-plus"></i> Add Option
                        </button>
                    </div>
                `;
                
                // Add option button handler
                document.getElementById('addOption').addEventListener('click', function() {
                    const optionsContainer = document.getElementById('mcqOptions');
                    const optionCount = optionsContainer.children.length;
                    
                    const optionRow = document.createElement('div');
                    optionRow.className = 'option-row mb-2';
                    optionRow.innerHTML = `
                        <div class="input-group">
                            <div class="input-group-text">
                                <input type="radio" name="correctOption" value="${optionCount}" required>
                            </div>
                            <input type="text" name="options[${optionCount}][text]" class="form-control" required placeholder="Option ${optionCount + 1}">
                            <button type="button" class="btn btn-danger remove-option">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    `;
                    optionsContainer.appendChild(optionRow);
                    updateRemoveButtons();
                });
                
                // Remove option handler
                document.getElementById('mcqOptions').addEventListener('click', function(e) {
                    if (e.target.classList.contains('remove-option') || 
                        e.target.closest('.remove-option')) {
                        e.target.closest('.option-row').remove();
                        updateRemoveButtons();
                        renumberOptions();
                    }
                });
                break;
                
            case 'TrueFalse':
                optionsSection.innerHTML = `
                    <div class="mb-4">
                        <label class="form-label">Correct Answer</label>
                        <div class="form-check mb-2">
                            <input type="radio" name="correctAnswer" value="true" class="form-check-input" id="answerTrue" required>
                            <label class="form-check-label" for="answerTrue">True</label>
                        </div>
                        <div class="form-check">
                            <input type="radio" name="correctAnswer" value="false" class="form-check-input" id="answerFalse" required>
                            <label class="form-check-label" for="answerFalse">False</label>
                        </div>
                        <div class="invalid-feedback">
                            Please select the correct answer.
                        </div>
                    </div>
                `;
                break;
                
            case 'ShortAnswer':
                optionsSection.innerHTML = `
                    <div class="mb-4">
                        <label for="correctAnswer" class="form-label">Correct Answer</label>
                        <input type="text" 
                               name="correctAnswer" 
                               id="correctAnswer" 
                               class="form-control"
                               required
                               placeholder="Enter the expected answer">
                        <div class="invalid-feedback">
                            Please provide the correct answer.
                        </div>
                    </div>
                `;
                break;
                
            case 'Essay':
                optionsSection.innerHTML = `
                    <div class="alert alert-info mb-4">
                        <i class="fas fa-info-circle me-2"></i>
                        Essay questions will be manually graded.
                    </div>
                `;
                break;
        }
    }

    // Initial setup for question type
    typeSelect.addEventListener('change', handleQuestionTypeChange);
    // Call once to set up initial state if needed
    handleQuestionTypeChange();

    // Add image field
    addImageBtn.addEventListener('click', function() {
        const imageRow = document.createElement('div');
        imageRow.className = 'image-row mb-2';
        imageRow.innerHTML = `
            <div class="input-group">
                <input type="file" name="images[]" class="form-control" accept="image/*">
                <input type="text" name="captions[]" class="form-control" placeholder="Image caption (optional)">
                <button type="button" class="btn btn-danger remove-image">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;
        imageContainer.appendChild(imageRow);
        updateRemoveImageButtons();
    });

    // Remove image field
    imageContainer.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-image') || 
            e.target.closest('.remove-image')) {
            e.target.closest('.image-row').remove();
            updateRemoveImageButtons();
        }
    });

    // Update remove buttons state
    function updateRemoveButtons() {
        const removeButtons = document.querySelectorAll('.remove-option');
        const optionsContainer = document.getElementById('mcqOptions');
        if (optionsContainer) {
            removeButtons.forEach(button => {
                button.disabled = optionsContainer.children.length <= 2;
            });
        }
    }

    // Update remove image buttons state
    function updateRemoveImageButtons() {
        const removeButtons = imageContainer.querySelectorAll('.remove-image');
        removeButtons.forEach(button => {
            button.disabled = imageContainer.children.length <= 1;
        });
    }

    // Renumber MCQ options
    function renumberOptions() {
        const options = document.querySelectorAll('.option-row');
        options.forEach((option, index) => {
            option.querySelector('input[type="radio"]').value = index;
            option.querySelector('input[type="text"]').name = `options[${index}][text]`;
        });
    }

    // Form validation
    form.addEventListener('submit', function(e) {
        if (!form.checkValidity()) {
            e.preventDefault();
            e.stopPropagation();
        }
        
        // Additional validation for MCQ questions
        if (typeSelect.value === 'MCQ') {
            const options = document.querySelectorAll('.option-row');
            const correctOption = document.querySelector('input[name="correctOption"]:checked');
            
            if (options.length < 2 || !correctOption) {
                e.preventDefault();
                alert('MCQ questions must have at least 2 options and one correct answer.');
            }
        }
        
        // Additional validation for True/False questions
        if (typeSelect.value === 'TrueFalse' && !document.querySelector('input[name="correctAnswer"]:checked')) {
            e.preventDefault();
            alert('Please select the correct answer for the True/False question.');
        }
        
        // Additional validation for Short Answer questions
        if (typeSelect.value === 'ShortAnswer' && !document.getElementById('correctAnswer').value.trim()) {
            e.preventDefault();
            alert('Please provide the correct answer for the Short Answer question.');
        }
        
        form.classList.add('was-validated');
    });
});
</script>

<%- include('../partials/footer') %> 